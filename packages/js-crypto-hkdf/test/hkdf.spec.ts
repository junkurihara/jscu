import {getTestEnv} from './prepare';
const env = getTestEnv();
const hkdf = env.library;
const envName = env.envName;


import * as chai from 'chai';
import {HashTypes} from '../src/params';
// const should = chai.should();
const expect = chai.expect;


let hashes: Array<HashTypes> = [//'SHA-256', 'SHA-384', 'SHA-512', 'SHA-1', 'MD5',
  'SHA3-224', 'SHA3-256', 'SHA3-384', 'SHA3-512'];
describe(`${envName}: HKDF test`, () => {
  let masterSecret: Uint8Array;
  const length = 144;
  before( async () => {
    masterSecret = new Uint8Array(32);
    for(let i = 0; i < 32; i++) masterSecret[i] = 0xFF & i;
  });

  it('HKDF is done with automatic salt generation', async function () {
    this.timeout(20000);
    await Promise.all(hashes.map( async (hash) => {
      const d = await hkdf.compute(masterSecret, hash, length, '', null);
      expect(d.key).to.be.a('Uint8Array');
      expect(d.salt).to.be.a('Uint8Array');
      expect(d.key.byteLength, `failed at ${hash}`).to.be.equal(length);
    }));

  });

  it('When the same salt is given, the same hash is obtained with HKDF', async function () {
    this.timeout(20000);
    await Promise.all(hashes.map( async (hash) => {
      const d = await hkdf.compute(masterSecret, hash, length, '', null);
      expect(d.key).to.be.a('Uint8Array');
      expect(d.salt).to.be.a('Uint8Array');
      expect(d.key.byteLength, `failed at ${hash}`).to.be.equal(length);

      const dash = await hkdf.compute(masterSecret, hash, length, '', d.salt);
      expect(dash.key).to.be.a('Uint8Array');
      expect(dash.salt).to.be.a('Uint8Array');
      expect(dash.key.toString() === d.key.toString(), `failed at ${hash}`).to.be.true;
    }));
  });

  const fixedMACs = {
    'SHA-256': '124,145,193,234,149,107,107,61,61,58,9,228,216,212,69,71,240,202,118,194,180,114,113,80,57,24,232,113,213,155,191,166,26,1,94,230,244,185,171,102,20,246,59,203,245,200,17,25,92,22,196,106,168,145,125,94,125,84,101,149,119,146,250,243,152,225,232,129,232,101,106,19,55,157,34,240,146,204,162,5,235,156,31,230,188,36,176,44,67,35,99,135,83,197,177,236,167,63,60,93,47,189,225,162,175,151,241,234,151,223,136,25,249,206,88,208,28,111,166,235,128,33,40,15,90,219,238,153,152,79,97,115,33,89,55,168,181,141,76,237,144,181,57,117',
    'SHA-384': '226,40,99,209,178,247,5,3,166,90,9,57,196,54,29,65,191,119,205,64,47,173,233,116,113,173,210,1,8,30,44,233,142,251,189,192,98,33,183,94,253,87,14,102,50,209,55,67,226,34,229,19,69,88,120,205,147,250,207,6,190,188,129,162,142,51,6,94,198,13,52,245,178,65,101,49,1,35,97,111,92,164,181,162,227,6,13,233,115,237,140,241,0,94,195,189,92,45,79,229,249,176,59,226,25,219,176,12,37,70,220,234,182,3,199,37,63,197,185,145,65,12,133,26,152,177,154,89,5,110,49,205,30,57,50,9,111,119,211,27,189,48,162,248',
    'SHA-512': '77,119,111,188,124,95,226,127,20,170,196,226,159,131,36,202,21,73,204,211,247,102,23,159,105,161,241,64,50,116,222,170,254,66,55,162,60,1,101,29,45,47,15,139,247,111,136,142,99,191,28,155,218,49,174,135,126,218,59,64,167,134,208,165,16,247,6,10,59,62,132,83,23,168,218,212,7,22,213,52,101,9,30,1,228,227,88,185,196,5,50,49,100,24,84,15,58,45,93,90,119,135,41,224,224,53,39,176,107,150,138,99,113,161,111,145,83,241,68,46,151,134,169,76,254,20,58,160,91,177,62,71,12,106,54,35,116,101,34,115,23,103,199,33',
    'SHA-1': '231,154,101,85,67,166,227,46,107,169,115,168,122,162,93,194,10,128,27,249,153,198,172,180,27,209,12,238,163,12,98,163,236,102,63,223,161,210,134,122,189,22,131,17,171,185,178,228,115,0,218,206,137,173,245,206,223,69,72,248,241,58,225,7,23,151,118,82,196,123,65,14,205,160,64,3,225,9,124,178,27,174,18,48,251,3,59,132,162,81,151,191,178,11,202,26,233,214,5,254,87,32,229,112,122,149,27,28,87,252,204,243,161,2,123,48,131,94,121,188,147,143,232,247,105,96,151,230,76,180,214,185,71,188,78,23,251,225,102,131,107,231,158,87',
    'MD5': '34,114,11,173,87,235,112,155,161,97,171,57,143,74,153,140,175,88,254,87,93,61,179,88,60,142,74,41,117,97,62,89,80,168,115,6,130,109,48,166,162,35,217,104,241,208,238,57,121,26,33,71,247,81,97,99,62,96,225,167,118,46,176,104,212,119,127,248,29,0,165,36,183,238,250,171,155,179,152,55,236,224,58,4,1,22,144,146,92,123,240,96,1,46,82,221,253,32,216,171,51,137,130,88,53,209,151,50,204,151,231,90,56,171,97,250,101,225,150,198,242,161,216,91,196,89,103,163,106,120,61,59,26,150,23,226,244,149,161,40,106,90,106,32',
    'SHA3-384': '58,208,12,185,66,55,16,57,217,245,86,44,24,118,168,8,238,108,66,147,139,197,53,137,106,201,182,94,173,56,219,43,235,90,5,113,40,57,231,89,114,28,42,10,125,70,223,203,205,247,183,11,111,255,47,32,122,136,174,173,54,144,27,210,116,117,218,201,224,84,229,121,166,196,74,90,56,80,147,220,161,35,189,168,9,44,144,65,170,163,37,207,220,221,139,195,90,185,113,97,196,52,7,218,194,145,171,26,206,73,4,25,41,48,45,160,68,116,248,232,148,234,77,99,182,179,13,121,44,216,109,49,107,234,76,240,141,222,111,217,253,6,79,176',
    'SHA3-512': '181,22,233,193,191,191,121,127,60,151,99,93,29,253,145,106,104,63,249,53,171,237,114,105,38,227,240,233,203,130,156,190,145,201,164,207,35,38,149,81,59,133,139,42,252,181,188,198,78,27,205,212,101,160,119,209,39,51,161,3,179,119,236,126,73,152,241,51,30,14,11,159,116,127,109,129,109,149,59,52,17,206,141,252,38,42,175,165,98,214,22,127,61,4,115,4,230,251,245,113,81,99,64,79,136,84,68,16,219,36,94,240,32,183,136,99,151,152,243,92,96,176,45,28,119,28,155,226,194,209,178,88,136,30,89,238,156,243,48,228,251,30,63,151',
    'SHA3-256': '95,216,88,157,83,134,1,149,82,83,224,1,68,167,76,120,205,177,123,205,104,223,153,232,102,130,150,50,199,239,3,22,123,66,191,128,232,71,115,78,86,191,246,244,126,158,140,217,71,254,240,124,254,99,100,211,23,47,251,63,143,223,249,78,240,150,191,252,117,122,226,3,179,238,52,19,30,225,63,172,208,157,80,240,45,129,100,255,0,142,82,101,154,221,144,62,2,251,124,215,121,244,63,6,139,201,30,69,119,180,122,100,245,185,72,229,97,9,51,139,93,245,98,75,39,26,213,4,16,84,17,253,67,182,142,134,176,170,239,120,200,16,119,230',
    'SHA3-224': '225,31,13,201,159,206,231,102,165,126,252,0,172,229,177,221,4,25,134,170,228,146,145,251,82,245,30,210,232,195,152,24,188,226,140,196,146,189,223,209,166,127,92,222,248,140,155,6,80,59,245,77,245,29,15,31,179,157,85,234,119,207,158,133,206,248,245,80,71,16,151,241,148,99,149,148,78,125,145,36,97,140,49,57,116,4,177,49,139,113,23,173,231,207,79,200,177,111,232,215,105,219,118,229,87,196,60,57,106,250,17,214,0,102,77,113,39,150,71,170,32,188,39,247,172,80,83,216,163,133,177,8,202,34,188,255,85,41,251,175,226,71,76,151',
  };

  it('When the fixed salt is given, the mac is always fixed', async function () {
    this.timeout(20000);
    await Promise.all(hashes.map( async (hash) => {
      const d = await hkdf.compute(masterSecret, hash, length, '', masterSecret);
      expect(d.key).to.be.a('Uint8Array');
      expect(d.salt).to.be.a('Uint8Array');
      expect(d.key.toString() === fixedMACs[hash]).to.be.true;
    }));
  });
});

